From 0b659e288bb9320a9455ddca2664fa9c02c9ed5f Mon Sep 17 00:00:00 2001
From: Sandip Giri <sgiri@us.ibm.com>
Date: Thu, 8 Jun 2017 04:27:18 -0400
Subject: [PATCH 1/5] np.float64("np.inf").astype(np.int32) is negative on x86
 but positive on ppc64le

---
 tensorflow/python/kernel_tests/cast_op_test.py | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/tensorflow/python/kernel_tests/cast_op_test.py b/tensorflow/python/kernel_tests/cast_op_test.py
index 17771e05723..a5d64740c7d 100644
--- a/tensorflow/python/kernel_tests/cast_op_test.py
+++ b/tensorflow/python/kernel_tests/cast_op_test.py
@@ -20,6 +20,7 @@
 
 import numpy as np
 import sys
+import platform
 
 from tensorflow.python.framework import constant_op
 from tensorflow.python.framework import dtypes
@@ -146,9 +147,16 @@ def testInfNan(self):
     if sys.byteorder == "big":  
       self._compare(np.inf, np.int32, i4.max, False)  
       self._compare(np.inf, np.int64, i8.max, False)  
-    else:  
-      self._compare(np.inf, np.int32, i4.min, False)  
-      self._compare(np.inf, np.int64, i8.min, False)  
+    else:
+      #np.float64("np.inf").astype(np.int32) is negative on x86 but positive on ppc64le
+      #Numpy link to relevant discussion - https://github.com/numpy/numpy/issues/9040
+      #Tensorflow link to relevant discussion - https://github.com/tensorflow/tensorflow/issues/9360
+      if platform.machine() == "ppc64le":
+        self._compare(-np.inf, np.int32, i4.min, False)
+        self._compare(-np.inf, np.int64, i8.min, False)
+      else:
+        self._compare(np.inf, np.int32, i4.min, False)
+        self._compare(np.inf, np.int64, i8.min, False)  
     self._compare(-np.inf, np.float32, -np.inf, False)
     self._compare(-np.inf, np.float64, -np.inf, False)
     self._compare(-np.inf, np.int32, i4.min, False)

From c63cebb80a26cb7eeaf0afe095886488f1a8ac8a Mon Sep 17 00:00:00 2001
From: Sandip Giri <sgiri@us.ibm.com>
Date: Tue, 13 Jun 2017 05:45:03 -0400
Subject: [PATCH 2/5] int64 signed/unsigned issue on ppc64le

---
 tensorflow/core/platform/profile_utils/cpu_utils.cc      | 6 +++---
 tensorflow/core/platform/profile_utils/cpu_utils.h       | 4 ++--
 tensorflow/core/platform/profile_utils/cpu_utils_test.cc | 4 ++--
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.cc b/tensorflow/core/platform/profile_utils/cpu_utils.cc
index 22400565d67..c4bf4ed564a 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.cc
@@ -28,8 +28,8 @@ namespace profile_utils {
 
 static ICpuUtilsHelper* cpu_utils_helper_instance_ = nullptr;
 
-/* static */ int64 CpuUtils::GetCycleCounterFrequency() {
-  static const int64 cpu_frequency = GetCycleCounterFrequencyImpl();
+/* static */ uint64 CpuUtils::GetCycleCounterFrequency() {
+  static const uint64 cpu_frequency = GetCycleCounterFrequencyImpl();
   return cpu_frequency;
 }
 
@@ -53,7 +53,7 @@ static ICpuUtilsHelper* cpu_utils_helper_instance_ = nullptr;
                                        GetCycleCounterFrequency());
 }
 
-/* static */ int64 CpuUtils::GetCycleCounterFrequencyImpl() {
+/* static */ uint64 CpuUtils::GetCycleCounterFrequencyImpl() {
 // TODO(satok): do not switch by macro here
 #if defined(__ANDROID__)
   return GetCpuUtilsHelperSingletonInstance().CalculateCpuFrequency();
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.h b/tensorflow/core/platform/profile_utils/cpu_utils.h
index 19471ec8585..2adf77fb7f9 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.h
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.h
@@ -97,7 +97,7 @@ class CpuUtils {
   // Return cycle counter frequency.
   // As this method caches the cpu frequency internally,
   // the first call will incur overhead, but not subsequent calls.
-  static int64 GetCycleCounterFrequency();
+  static uint64 GetCycleCounterFrequency();
 
   // Return micro secound per each clock
   // As this method caches the cpu frequency internally,
@@ -134,7 +134,7 @@ class CpuUtils {
   // CAVEAT: as this method calls system call and parse the mssage,
   // this call may be slow. This is why this class caches the value by
   // StaticVariableInitializer.
-  static int64 GetCycleCounterFrequencyImpl();
+  static uint64 GetCycleCounterFrequencyImpl();
 
   // Return a singleton of ICpuUtilsHelper
   // ICpuUtilsHelper is declared as a function-local static variable
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
index ca487965a0c..a55ee0d9168 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
@@ -53,9 +53,9 @@ TEST_F(CpuUtilsTest, CheckGetCurrentClockCycle) {
 }
 
 TEST_F(CpuUtilsTest, CheckCycleCounterFrequency) {
-  const int64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
+  const uint64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
   CHECK_GT(cpu_frequency, 0);
-  CHECK_NE(cpu_frequency, CpuUtils::INVALID_FREQUENCY);
+  CHECK_NE(cpu_frequency, unsigned(CpuUtils::INVALID_FREQUENCY));
   if (DBG) {
     LOG(INFO) << "Cpu frequency = " << cpu_frequency;
   }

From c42d2f52a8237e7e73e29a5658bfe0c83baee414 Mon Sep 17 00:00:00 2001
From: Sandip Giri <sgiri@us.ibm.com>
Date: Mon, 26 Jun 2017 08:55:55 -0400
Subject: [PATCH 3/5] Adding ppc64le support for test
 //tensorflow/core:platform_profile_utils_cpu_utils_test

---
 tensorflow/core/platform/profile_utils/cpu_utils.cc      | 13 ++++++++++---
 tensorflow/core/platform/profile_utils/cpu_utils.h       |  6 +++++-
 tensorflow/core/platform/profile_utils/cpu_utils_test.cc | 12 +++++++++---
 3 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.cc b/tensorflow/core/platform/profile_utils/cpu_utils.cc
index c4bf4ed564a..c44cec394cd 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.cc
@@ -28,10 +28,17 @@ namespace profile_utils {
 
 static ICpuUtilsHelper* cpu_utils_helper_instance_ = nullptr;
 
-/* static */ uint64 CpuUtils::GetCycleCounterFrequency() {
-  static const uint64 cpu_frequency = GetCycleCounterFrequencyImpl();
-  return cpu_frequency;
+#if defined(__powerpc__) || defined(__ppc__)
+   /* static */ uint64 CpuUtils::GetCycleCounterFrequency() {
+     static const uint64 cpu_frequency = GetCycleCounterFrequencyImpl();
+     return cpu_frequency;
 }
+#else
+   /* static */ int64 CpuUtils::GetCycleCounterFrequency() {
+     static const int64 cpu_frequency = GetCycleCounterFrequencyImpl();
+     return cpu_frequency;
+}
+#endif
 
 /* static */ double CpuUtils::GetMicroSecPerClock() {
   static const double micro_sec_per_clock =
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.h b/tensorflow/core/platform/profile_utils/cpu_utils.h
index 2adf77fb7f9..f2669f7afdf 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.h
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.h
@@ -97,7 +97,11 @@ class CpuUtils {
   // Return cycle counter frequency.
   // As this method caches the cpu frequency internally,
   // the first call will incur overhead, but not subsequent calls.
-  static uint64 GetCycleCounterFrequency();
+  #if defined(__powerpc__) || defined(__ppc__)
+     static uint64 GetCycleCounterFrequency();
+  #else
+     static int64 GetCycleCounterFrequency();
+  #endif
 
   // Return micro secound per each clock
   // As this method caches the cpu frequency internally,
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
index a55ee0d9168..3a574b2e507 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
@@ -53,9 +53,15 @@ TEST_F(CpuUtilsTest, CheckGetCurrentClockCycle) {
 }
 
 TEST_F(CpuUtilsTest, CheckCycleCounterFrequency) {
-  const uint64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
-  CHECK_GT(cpu_frequency, 0);
-  CHECK_NE(cpu_frequency, unsigned(CpuUtils::INVALID_FREQUENCY));
+  #if defined(__powerpc__) || defined(__ppc__)
+     const uint64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
+     CHECK_GT(cpu_frequency, 0);
+     CHECK_NE(cpu_frequency, unsigned(CpuUtils::INVALID_FREQUENCY));
+  #else
+     const int64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
+     CHECK_GT(cpu_frequency, 0);
+     CHECK_NE(cpu_frequency, CpuUtils::INVALID_FREQUENCY);
+  #endif
   if (DBG) {
     LOG(INFO) << "Cpu frequency = " << cpu_frequency;
   }

From 1d6593e2ecd8fe4e8eea7a3363fa6878cb978460 Mon Sep 17 00:00:00 2001
From: Sandip Giri <sgiri@us.ibm.com>
Date: Tue, 27 Jun 2017 05:27:10 -0400
Subject: [PATCH 4/5] Fixed comment style and changed if condition from "power"
 to "power && little_endian" (ppc64le specific)

---
 tensorflow/core/platform/profile_utils/cpu_utils.cc      | 2 +-
 tensorflow/core/platform/profile_utils/cpu_utils.h       | 2 +-
 tensorflow/core/platform/profile_utils/cpu_utils_test.cc | 2 +-
 tensorflow/python/kernel_tests/cast_op_test.py           | 6 +++---
 4 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.cc b/tensorflow/core/platform/profile_utils/cpu_utils.cc
index c44cec394cd..b0a16443d4a 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.cc
@@ -28,7 +28,7 @@ namespace profile_utils {
 
 static ICpuUtilsHelper* cpu_utils_helper_instance_ = nullptr;
 
-#if defined(__powerpc__) || defined(__ppc__)
+#if defined(__powerpc__) || defined(__ppc__) && ( __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    /* static */ uint64 CpuUtils::GetCycleCounterFrequency() {
      static const uint64 cpu_frequency = GetCycleCounterFrequencyImpl();
      return cpu_frequency;
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.h b/tensorflow/core/platform/profile_utils/cpu_utils.h
index f2669f7afdf..3af883f5697 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.h
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.h
@@ -97,7 +97,7 @@ class CpuUtils {
   // Return cycle counter frequency.
   // As this method caches the cpu frequency internally,
   // the first call will incur overhead, but not subsequent calls.
-  #if defined(__powerpc__) || defined(__ppc__)
+  #if defined(__powerpc__) || defined(__ppc__) && ( __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
      static uint64 GetCycleCounterFrequency();
   #else
      static int64 GetCycleCounterFrequency();
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
index 3a574b2e507..e1ec4aaac0f 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils_test.cc
@@ -53,7 +53,7 @@ TEST_F(CpuUtilsTest, CheckGetCurrentClockCycle) {
 }
 
 TEST_F(CpuUtilsTest, CheckCycleCounterFrequency) {
-  #if defined(__powerpc__) || defined(__ppc__)
+  #if defined(__powerpc__) || defined(__ppc__) && ( __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
      const uint64 cpu_frequency = CpuUtils::GetCycleCounterFrequency();
      CHECK_GT(cpu_frequency, 0);
      CHECK_NE(cpu_frequency, unsigned(CpuUtils::INVALID_FREQUENCY));
diff --git a/tensorflow/python/kernel_tests/cast_op_test.py b/tensorflow/python/kernel_tests/cast_op_test.py
index a5d64740c7d..c785f2358d5 100644
--- a/tensorflow/python/kernel_tests/cast_op_test.py
+++ b/tensorflow/python/kernel_tests/cast_op_test.py
@@ -148,9 +148,9 @@ def testInfNan(self):
       self._compare(np.inf, np.int32, i4.max, False)  
       self._compare(np.inf, np.int64, i8.max, False)  
     else:
-      #np.float64("np.inf").astype(np.int32) is negative on x86 but positive on ppc64le
-      #Numpy link to relevant discussion - https://github.com/numpy/numpy/issues/9040
-      #Tensorflow link to relevant discussion - https://github.com/tensorflow/tensorflow/issues/9360
+      # np.float64("np.inf").astype(np.int32) is negative on x86 but positive on ppc64le
+      # Numpy link to relevant discussion - https://github.com/numpy/numpy/issues/9040
+      # Tensorflow link to relevant discussion - https://github.com/tensorflow/tensorflow/issues/9360
       if platform.machine() == "ppc64le":
         self._compare(-np.inf, np.int32, i4.min, False)
         self._compare(-np.inf, np.int64, i8.min, False)

From c8d78a1c291fb4b0868cf18f5b4d17716be6c8cf Mon Sep 17 00:00:00 2001
From: Sandip Giri <sgiri@us.ibm.com>
Date: Tue, 27 Jun 2017 05:48:55 -0400
Subject: [PATCH 5/5] Signed/unsigned changes not required for
 GetCycleCounterFrequencyImpl()

---
 tensorflow/core/platform/profile_utils/cpu_utils.cc | 2 +-
 tensorflow/core/platform/profile_utils/cpu_utils.h  | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.cc b/tensorflow/core/platform/profile_utils/cpu_utils.cc
index b0a16443d4a..52df84e81ce 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.cc
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.cc
@@ -60,7 +60,7 @@ static ICpuUtilsHelper* cpu_utils_helper_instance_ = nullptr;
                                        GetCycleCounterFrequency());
 }
 
-/* static */ uint64 CpuUtils::GetCycleCounterFrequencyImpl() {
+/* static */ int64 CpuUtils::GetCycleCounterFrequencyImpl() {
 // TODO(satok): do not switch by macro here
 #if defined(__ANDROID__)
   return GetCpuUtilsHelperSingletonInstance().CalculateCpuFrequency();
diff --git a/tensorflow/core/platform/profile_utils/cpu_utils.h b/tensorflow/core/platform/profile_utils/cpu_utils.h
index 3af883f5697..8979a40ea10 100644
--- a/tensorflow/core/platform/profile_utils/cpu_utils.h
+++ b/tensorflow/core/platform/profile_utils/cpu_utils.h
@@ -138,7 +138,7 @@ class CpuUtils {
   // CAVEAT: as this method calls system call and parse the mssage,
   // this call may be slow. This is why this class caches the value by
   // StaticVariableInitializer.
-  static uint64 GetCycleCounterFrequencyImpl();
+  static int64 GetCycleCounterFrequencyImpl();
 
   // Return a singleton of ICpuUtilsHelper
   // ICpuUtilsHelper is declared as a function-local static variable
