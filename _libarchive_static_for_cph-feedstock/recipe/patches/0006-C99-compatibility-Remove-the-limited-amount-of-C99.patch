From 3de09b78f6754f0ab9bf8d51dbe0a20dbe08953e Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Thu, 16 Apr 2020 14:50:50 +0200
Subject: [PATCH 6/7] C99 compatibility: Remove (the limited amount of) C99

---
 libarchive/archive_read_support_filter_lz4.c  | 6 ++++--
 libarchive/archive_read_support_filter_zstd.c | 4 +++-
 libarchive/archive_write_add_filter_zstd.c    | 5 ++++-
 libarchive/archive_write_disk_windows.c       | 2 +-
 libarchive/test/test_sparse_basic.c           | 8 +++-----
 tar/test/test_option_C_mtree.c                | 3 +--
 6 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/libarchive/archive_read_support_filter_lz4.c b/libarchive/archive_read_support_filter_lz4.c
index 43ee6c2b..ce18e7f9 100644
--- a/libarchive/archive_read_support_filter_lz4.c
+++ b/libarchive/archive_read_support_filter_lz4.c
@@ -336,6 +336,7 @@ lz4_filter_read(struct archive_read_filter *self, const void **p)
 
 	while (state->stage == SELECT_STREAM) {
 		const char *read_buf;
+		uint32_t number;
 
 		/* Read a magic number. */
 		read_buf = __archive_read_filter_ahead(self->upstream, 4,
@@ -345,13 +346,14 @@ lz4_filter_read(struct archive_read_filter *self, const void **p)
 			*p = NULL;
 			return (0);
 		}
-		uint32_t number = archive_le32dec(read_buf);
+		number = archive_le32dec(read_buf);
 		__archive_read_filter_consume(self->upstream, 4);
 		if (number == LZ4_MAGICNUMBER)
 			return lz4_filter_read_default_stream(self, p);
 		else if (number == LZ4_LEGACY)
 			return lz4_filter_read_legacy_stream(self, p);
 		else if ((number & ~0xF) == LZ4_SKIPPABLED) {
+			uint32_t skip_bytes;
 			read_buf = __archive_read_filter_ahead(
 				self->upstream, 4, NULL);
 			if (read_buf == NULL) {
@@ -361,7 +363,7 @@ lz4_filter_read(struct archive_read_filter *self, const void **p)
 				    "Malformed lz4 data");
 				return (ARCHIVE_FATAL);
 			}
-			uint32_t skip_bytes = archive_le32dec(read_buf);
+			skip_bytes = archive_le32dec(read_buf);
 			__archive_read_filter_consume(self->upstream,
 				4 + skip_bytes);
 		} else {
diff --git a/libarchive/archive_read_support_filter_zstd.c b/libarchive/archive_read_support_filter_zstd.c
index c8bb36be..93f5dd04 100644
--- a/libarchive/archive_read_support_filter_zstd.c
+++ b/libarchive/archive_read_support_filter_zstd.c
@@ -209,7 +209,9 @@ zstd_filter_read(struct archive_read_filter *self, const void **p)
 
 	state = (struct private_data *)self->data;
 
-	out = (ZSTD_outBuffer) { state->out_block, state->out_block_size, 0 };
+	out.dst = state->out_block;
+	out.size = state->out_block_size;
+	out.pos = 0;
 
 	/* Try to fill the output buffer. */
 	while (out.pos < out.size && !state->eof) {
diff --git a/libarchive/archive_write_add_filter_zstd.c b/libarchive/archive_write_add_filter_zstd.c
index 4c91551e..047b11a8 100644
--- a/libarchive/archive_write_add_filter_zstd.c
+++ b/libarchive/archive_write_add_filter_zstd.c
@@ -249,7 +249,10 @@ static int
 drive_compressor(struct archive_write_filter *f,
     struct private_data *data, int finishing, const void *src, size_t length)
 {
-	ZSTD_inBuffer in = (ZSTD_inBuffer) { src, length, 0 };
+	ZSTD_inBuffer in;
+	in.src = src;
+	in.size = length;
+	in.pos = 0;
 
 	for (;;) {
 		if (data->out.pos == data->out.size) {
diff --git a/libarchive/archive_write_disk_windows.c b/libarchive/archive_write_disk_windows.c
index 77e36c4a..3d1831fa 100644
--- a/libarchive/archive_write_disk_windows.c
+++ b/libarchive/archive_write_disk_windows.c
@@ -1662,7 +1662,7 @@ create_filesystem_object(struct archive_write_disk *a)
 	/* Since link(2) and symlink(2) don't handle modes, we're done here. */
 	linkname = archive_entry_hardlink_w(a->entry);
 	if (linkname != NULL) {
-		wchar_t *linkfull, *namefull;
+		wchar_t const *linkfull, *namefull;
 
 		linkfull = __la_win_permissive_name_w(linkname);
 		namefull = __la_win_permissive_name_w(a->name);
diff --git a/libarchive/test/test_sparse_basic.c b/libarchive/test/test_sparse_basic.c
index 0fbb7f7b..6461633c 100644
--- a/libarchive/test/test_sparse_basic.c
+++ b/libarchive/test/test_sparse_basic.c
@@ -117,6 +117,7 @@ create_sparse_file(const char *path, const struct sparse *s)
 	char buff[1024];
 	HANDLE handle;
 	DWORD dmy;
+	uint64_t offsetSoFar = 0;
 
 	memset(buff, ' ', sizeof(buff));
 
@@ -127,20 +128,17 @@ create_sparse_file(const char *path, const struct sparse *s)
 	assert(DeviceIoControl(handle, FSCTL_SET_SPARSE, NULL, 0,
 	    NULL, 0, &dmy, NULL) != 0);
 
-	uint64_t offsetSoFar = 0;
-
 	while (s->type != END) {
 		if (s->type == HOLE) {
 			LARGE_INTEGER fileOffset, beyondOffset, distanceToMove;
+			FILE_ZERO_DATA_INFORMATION zeroInformation;
+			DWORD bytesReturned;
 			fileOffset.QuadPart = offsetSoFar;
 			beyondOffset.QuadPart = offsetSoFar + s->size;
 			distanceToMove.QuadPart = s->size;
-
-			FILE_ZERO_DATA_INFORMATION zeroInformation;
 			zeroInformation.FileOffset = fileOffset;
 			zeroInformation.BeyondFinalZero = beyondOffset;
 
-			DWORD bytesReturned;
 			assert(SetFilePointerEx(handle, distanceToMove,
 				NULL, FILE_CURRENT) != 0);
 			assert(SetEndOfFile(handle) != 0);
diff --git a/tar/test/test_option_C_mtree.c b/tar/test/test_option_C_mtree.c
index ccadc389..2e83767b 100644
--- a/tar/test/test_option_C_mtree.c
+++ b/tar/test/test_option_C_mtree.c
@@ -30,10 +30,9 @@ __FBSDID("$FreeBSD$");
 
 DEFINE_TEST(test_option_C_mtree)
 {
-	char *p0;
+	char *p0 = NULL;
 	size_t s;
 	int r;
-	p0 = NULL;
 	char *content = "./foo type=file uname=root gname=root mode=0755\n";
 	char *filename = "output.tar";
 #if defined(_WIN32) && !defined(CYGWIN)
-- 
2.23.0

