# version numbering is explained at https://stackoverflow.com/questions/42730478/version-numbers-for-visual-studio-2017-boost-and-cmake
#     This version number follows the "platform toolset"
{% set vcver="14.1" %}
{% set vsyear="2017" %}
# this version follows the version number reported for the vcruntim140.dll file.
#     This will be in a folder like C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Redist\MSVC\14.15.26706\x64\Microsoft.VC141.CRT
#     Note the 14.15.26706 in there - that's what we want, but in case their folder scheme changes, it's better to base it on the version of the file itself.
{% set fullver="14.15.26706" %}
# VS2017 is fundamentally compatible with VS2015.  We name our package vs2015_runtime so that it can't be
#    mixed up with the runtime from VS2015 - you do actually need VS2017 runtime for things compiled with
#    VS2017, and the runtime we have here is backwards-compatible with things compiled with VS2015.
{% set runtime_year="2015" %}

package:
  name: vs_activation_and_runtime
  version: {{ fullver }}

build:
  skip: True  [not win]
  number: 4

outputs:
  - name: vs{{ vsyear }}_{{ cross_compiler_target_platform }}
    script: install_activate.bat
    build:
      track_features:
        - vc{{ vcver.split(".")[0] }}
    run_exports:
      strong:
        # compatible within major version.  This is MSFT's incrementing of the UCRT version.  It was
        #    14.0 with VS2015, and 14.1 with VS2017 - if the major version changes, we're assuming
        #    that binary compatibility breaks.  This has a minimum bound equal to vcver, so building with
        #    vs2017 here will require the vs2017-era runtime (the package is named vs2015_runtime, but the
        #    version differs)
        - {{ pin_subpackage('vc') }}
    about:
      summary: Activation and version verification of MSVC {{ vcver }} (VS {{ vsyear }}) compiler
      license: BSD 3-clause
  - name: vs{{ runtime_year }}_runtime
    script: install_runtime.bat
    build:
      no_link:
        - |
          *.dll
        - Library/bin/*.dll
  - name: vc
    version: {{ vcver }}
    build:
      track_features:
        - vc{{ vcver.split(".")[0] }}
    requirements:
      run:
        # Set lower bound for runtime (no upper bound).  Upper bound is still present, but
        #    it's part of the run_exports for the compiler: assume that when vcver's major version changes,
        #    MSFT has broken our binary compatibility.
        - {{ pin_subpackage('vs' ~ runtime_year ~ '_runtime', max_pin=None) }}
    about:
      home: https://github.com/conda/conda/wiki/VC-features
      license: Modified BSD License (3-clause)
      license_family: BSD
      summary: A meta-package to impose mutual exclusivity among software built with different VS versions
      description: |
          This metapackage is used to enforce consistency of runtime
          dependencies within an environment
      doc_url: https://github.com/conda/conda/wiki/VC-features
      dev_url: https://github.com/conda/conda/wiki/VC-features
