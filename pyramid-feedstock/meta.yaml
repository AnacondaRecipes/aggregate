{% set name = "pyramid" %}
{% set version = "1.9.2" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "cf89a48cb899291639686bf3d4a883b39e496151fa4871fb83cc1a3200d5b925" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt
  entry_points:
    - pcreate=pyramid.scripts.pcreate:main
    - pserve=pyramid.scripts.pserve:main
    - pshell=pyramid.scripts.pshell:main
    - proutes=pyramid.scripts.proutes:main
    - pviews=pyramid.scripts.pviews:main
    - ptweens=pyramid.scripts.ptweens:main
    - prequest=pyramid.scripts.prequest:main
    - pdistreport=pyramid.scripts.pdistreport:main

requirements:
  host:
    - python
    - setuptools
    - setuptools
    - webob >=1.7.0
    - repoze.lru >=0.4
    - zope.interface >=3.8.0
    - zope.deprecation >=3.5.0
    - venusian >=1.0a3
    - translationstring >=0.4
    - pastedeploy >=1.5.0
    - plaster
    - plaster_pastedeploy
    - hupper
  run:
    - python
    - setuptools
    - setuptools
    - webob >=1.7.0
    - repoze.lru >=0.4
    - zope.interface >=3.8.0
    - zope.deprecation >=3.5.0
    - venusian >=1.0a3
    - translationstring >=0.4
    - pastedeploy >=1.5.0
    - plaster
    - plaster_pastedeploy
    - hupper

test:
  imports:
    - pyramid
    - pyramid.config
    - pyramid.scaffolds
    - pyramid.scripts
    - pyramid.tests
    - pyramid.tests.pkgs
    - pyramid.tests.pkgs.ccbugapp
    - pyramid.tests.pkgs.conflictapp
    - pyramid.tests.pkgs.defpermbugapp
    - pyramid.tests.pkgs.eventonly
    - pyramid.tests.pkgs.exceptionviewapp
    - pyramid.tests.pkgs.fixtureapp
    - pyramid.tests.pkgs.fixtureapp.subpackage
    - pyramid.tests.pkgs.forbiddenapp
    - pyramid.tests.pkgs.forbiddenview
    - pyramid.tests.pkgs.hybridapp
    - pyramid.tests.pkgs.includeapp1
    - pyramid.tests.pkgs.localeapp
    - pyramid.tests.pkgs.notfoundview
    - pyramid.tests.pkgs.permbugapp
    - pyramid.tests.pkgs.rendererscanapp
    - pyramid.tests.pkgs.rendererscanapp.two
    - pyramid.tests.pkgs.restbugapp
    - pyramid.tests.pkgs.static_abspath
    - pyramid.tests.pkgs.static_assetspec
    - pyramid.tests.pkgs.static_routeprefix
    - pyramid.tests.pkgs.staticpermapp
    - pyramid.tests.pkgs.subrequestapp
    - pyramid.tests.pkgs.viewdecoratorapp
    - pyramid.tests.pkgs.viewdecoratorapp.views
    - pyramid.tests.pkgs.wsgiapp2app
    - pyramid.tests.test_config
    - pyramid.tests.test_config.pkgs
    - pyramid.tests.test_config.pkgs.asset
    - pyramid.tests.test_config.pkgs.asset.subpackage
    - pyramid.tests.test_config.pkgs.scanextrakw
    - pyramid.tests.test_config.pkgs.scannable
    - pyramid.tests.test_config.pkgs.scannable.subpackage
    - pyramid.tests.test_config.pkgs.scannable.subpackage.subsubpackage
    - pyramid.tests.test_config.pkgs.selfscan
    - pyramid.tests.test_scaffolds
    - pyramid.tests.test_scripts
  commands:
    - pcreate --help
    - pserve --help
    - pshell --help
    - proutes --help
    - pviews --help
    - ptweens --help
    - prequest --help
    - pdistreport --help
  requires:
    - webtest >=1.3.1
    - zope.component >=4.0

about:
  home: https://trypyramid.com
  license: BSD-derived (http://www.repoze.org/LICENSE.txt)
  license_family: BSD
  license_file: ''
  summary: The Pyramid Web Framework, a Pylons project
  description: "Pyramid\n=======\n\n.. image:: https://travis-ci.org/Pylons/pyramid.png?branch=1.9-branch\n        :target: https://travis-ci.org/Pylons/pyramid\n        :alt: 1.9-branch Travis CI Status\n\
    \n.. image:: https://readthedocs.org/projects/pyramid/badge/?version=1.9-branch\n        :target: https://docs.pylonsproject.org/projects/pyramid/en/1.9-branch/\n        :alt: 1.9-branch Documentation\
    \ Status\n\n.. image:: https://img.shields.io/badge/irc-freenode-blue.svg\n        :target: https://webchat.freenode.net/?channels=pyramid\n        :alt: IRC Freenode\n\n`Pyramid <https://trypyramid.com/>`_\
    \ is a small, fast, down-to-earth, open\nsource Python web framework. It makes real-world web application development\nand deployment more fun, more predictable, and more productive.\n\n.. code-block::\
    \ python\n\n   from wsgiref.simple_server import make_server\n   from pyramid.config import Configurator\n   from pyramid.response import Response\n\n   def hello_world(request):\n       return Response('Hello\
    \ %(name)s!' % request.matchdict)\n\n   if __name__ == '__main__':\n       with Configurator() as config:\n           config.add_route('hello', '/hello/{name}')\n           config.add_view(hello_world,\
    \ route_name='hello')\n           app = config.make_wsgi_app()\n       server = make_server('0.0.0.0', 8080, app)\n       server.serve_forever()\n\nPyramid is a project of the `Pylons Project <https://pylonsproject.org>`_.\n\
    \nSupport and Documentation\n-------------------------\n\nSee `Pyramid Support and Development\n<https://docs.pylonsproject.org/projects/pyramid/en/latest/#support-and-development>`_\nfor documentation,\
    \ reporting bugs, and getting support.\n\nDeveloping and Contributing\n---------------------------\n\nSee `HACKING.txt <https://github.com/Pylons/pyramid/blob/master/HACKING.txt>`_ and\n`contributing.md\
    \ <https://github.com/Pylons/pyramid/blob/master/contributing.md>`_\nfor guidelines on running tests, adding features, coding style, and updating\ndocumentation when developing in or contributing to\
    \ Pyramid.\n\nLicense\n-------\n\nPyramid is offered under the BSD-derived `Repoze Public License\n<http://repoze.org/license.html>`_.\n\nAuthors\n-------\n\nPyramid is made available by `Agendaless\
    \ Consulting <https://agendaless.com>`_\nand a team of `contributors\n<https://github.com/Pylons/pyramid/graphs/contributors>`_.\n\n\n.. _changes_1.9.2:\n\n1.9.2 (2018-04-23)\n==================\n\n\
      - Pin to ``webob >= 1.7.0`` instead of ``1.7.0rc2`` to avoid accidentally\n  opting users into pre-releases because a downstream dependency allowed it.\n  See https://github.com/Pylons/pyramid/issues/3220\n\
    \n- Fix ``pyramid.scripting.get_root`` which was broken by the execution policy\n  feature added in the 1.9 release.\n  See https://github.com/Pylons/pyramid/pull/3265\n\n.. _changes_1.9.1:\n\n1.9.1\
    \ (2017-07-13)\n==================\n\n- Add a ``_depth`` and ``_category`` arguments to all of the venusian\n  decorators. The ``_category`` argument can be used to affect which actions\n  are registered\
    \ when performing a ``config.scan(..., category=...)`` with a\n  specific category. The ``_depth`` argument should be used when wrapping\n  the decorator in your own. This change affects ``pyramid.view.view_config``,\n\
    \  ``pyramid.view.exception_view_config``,\n  ``pyramid.view.forbidden_view_config``, ``pyramid.view.notfound_view_config``,\n  ``pyramid.events.subscriber`` and ``pyramid.response.response_adapter``\n\
    \  decorators. See https://github.com/Pylons/pyramid/pull/3121 and\n  https://github.com/Pylons/pyramid/pull/3123\n\n- Fix a circular import which made it impossible to import\n  ``pyramid.viewderivers``\
    \ before ``pyramid.config``.\n  See https://github.com/Pylons/pyramid/pull/3124\n\n- Improve documentation to show the ``pyramid.config.Configurator`` being\n  used as a context manager in more places.\n\
    \  See https://github.com/Pylons/pyramid/pull/3126\n\n1.9 (2017-06-26)\n================\n\n- No major changes from 1.9b1.\n\n- Updated documentation links for ``docs.pylonsproject.org`` to use HTTPS.\n\
    \n1.9b1 (2017-06-19)\n==================\n\n- Add an informative error message when unknown predicates are supplied. The\n  new message suggests alternatives based on the list of known predicates.\n\
    \  See https://github.com/Pylons/pyramid/pull/3054\n\n- Added integrity attributes for JavaScripts in cookiecutters, scaffolds, and\n  resulting source files in tutorials.\n  See https://github.com/Pylons/pyramid/issues/2548\n\
    \n- Update RELEASING.txt for updating cookiecutters. Change cookiecutter URLs to\n  use shortcut.\n  See https://github.com/Pylons/pyramid/issues/3042\n\n- Ensure the correct threadlocals are pushed\
    \ during view execution when\n  invoked from ``request.invoke_exception_view``.\n  See https://github.com/Pylons/pyramid/pull/3060\n\n- Fix a bug in which ``pyramid.security.ALL_PERMISSIONS`` failed\
    \ to return\n  a valid iterator in its ``__iter__`` implementation.\n  See https://github.com/Pylons/pyramid/pull/3074\n\n- Normalize the permission results to a proper class hierarchy.\n  ``pyramid.security.ACLAllowed``\
    \ is now a subclass of\n  ``pyramid.security.Allowed`` and ``pyramid.security.ACLDenied`` is now a\n  subclass of ``pyramid.security.Denied``.\n  See https://github.com/Pylons/pyramid/pull/3084\n\n\
      - Add a ``quote_via`` argument to ``pyramid.encode.urlencode`` to follow\n  the stdlib's version and enable custom quoting functions.\n  See https://github.com/Pylons/pyramid/pull/3088\n\n- Support\
    \ `_query=None` and `_anchor=None` in ``request.route_url`` as well\n  as ``query=None`` and ``anchor=None`` in ``request.resource_url``.\n  Previously this would cause an `?` and a `#`, respectively,\
    \ in the url\n  with nothing after it. Now the unnecessary parts are dropped from the\n  generated URL. See https://github.com/Pylons/pyramid/pull/3034\n\n- Revamp the ``IRouter`` API used by ``IExecutionPolicy``\
    \ to force\n  pushing/popping the request threadlocals. The\n  ``IRouter.make_request(environ)`` API has been replaced by\n  ``IRouter.request_context(environ)`` which should be used as a context\n\
    \  manager. See https://github.com/Pylons/pyramid/pull/3086\n\n1.9a2 (2017-05-09)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- ``request.exception`` and ``request.exc_info``\
    \ will only be set if the\n  response was generated by the EXCVIEW tween. This is to avoid any confusion\n  where a response was generated elsewhere in the pipeline and not in\n  direct relation to\
    \ the original exception. If anyone upstream wants to\n  catch and render responses for exceptions they should set\n  ``request.exception`` and ``request.exc_info`` themselves to indicate\n  the exception\
    \ that was squashed when generating the response.\n\n  Similar behavior occurs with ``request.invoke_exception_view`` in which\n  the exception properties are set to reflect the exception if a response\n\
    \  is successfully generated by the method.\n\n  This is a very minor incompatibility. Most tweens right now would give\n  priority to the raised exception and ignore ``request.exception``. This\n \
    \ change just improves and clarifies that bookkeeping by trying to be\n  more clear about the relationship between the response and its squashed\n  exception. See https://github.com/Pylons/pyramid/pull/3029\
    \ and\n  https://github.com/Pylons/pyramid/pull/3031\n\n1.9a1 (2017-05-01)\n==================\n\nMajor Features\n--------------\n\n- The file format used by all ``p*`` command line scripts such as\
    \ ``pserve``\n  and ``pshell``, as well as the ``pyramid.paster.bootstrap`` function\n  is now replaceable thanks to a new dependency on\n  `plaster <https://docs.pylonsproject.org/projects/plaster/en/latest/>`_.\n\
    \n  For now, Pyramid is still shipping with integrated support for the\n  PasteDeploy INI format by depending on the\n  `plaster_pastedeploy <https://github.com/Pylons/plaster_pastedeploy>`_\n  binding\
    \ library. This may change in the future.\n\n  See https://github.com/Pylons/pyramid/pull/2985\n\n- Added an execution policy hook to the request pipeline. An execution\n  policy has the ability to\
    \ control creation and execution of the request\n  objects before they enter the rest of the pipeline. This means for a single\n  request environ the policy may create more than one request object.\n\
    \n  The first library to use this feature is\n  `pyramid_retry\n  <https://docs.pylonsproject.org/projects/pyramid-retry/en/latest/>`_.\n\n  See https://github.com/Pylons/pyramid/pull/2964\n\n- CSRF\
    \ support has been refactored out of sessions and into its own\n  independent API in the ``pyramid.csrf`` module. It supports a pluggable\n  ``pyramid.interfaces.ICSRFStoragePolicy`` which can be used\
    \ to define your\n  own mechanism for generating and validating CSRF tokens. By default,\n  Pyramid continues to use the ``pyramid.csrf.LegacySessionCSRFStoragePolicy``\n  that uses the ``request.session.get_csrf_token``\
    \ and\n  ``request.session.new_csrf_token`` APIs under the hood to preserve\n  compatibility. Two new policies are shipped as well,\n  ``pyramid.csrf.SessionCSRFStoragePolicy`` and\n  ``pyramid.csrf.CookieCSRFStoragePolicy``\
    \ which will store the CSRF tokens\n  in the session and in a standalone cookie, respectively. The storage policy\n  can be changed by using the new\n  ``pyramid.config.Configurator.set_csrf_storage_policy``\
    \ config directive.\n\n  CSRF tokens should be used via the new ``pyramid.csrf.get_csrf_token``,\n  ``pyramid.csrf.new_csrf_token`` and ``pyramid.csrf.check_csrf_token`` APIs\n  in order to continue\
    \ working if the storage policy is changed. Also, the\n  ``pyramid.csrf.get_csrf_token`` function is injected into templates to be\n  used conveniently in UI code.\n\n  See https://github.com/Pylons/pyramid/pull/2854\
    \ and\n  https://github.com/Pylons/pyramid/pull/3019\n\nMinor Features\n--------------\n\n- Support an ``open_url`` config setting in the ``pserve`` section of the\n  config file. This url is used to\
    \ open a web browser when ``pserve --browser``\n  is invoked. When this setting is unavailable the ``pserve`` script will\n  attempt to guess the port the server is using from the\n  ``server:<server_name>``\
    \ section of the config file but there is no\n  requirement that the server is being run in this format so it may fail.\n  See https://github.com/Pylons/pyramid/pull/2984\n\n- The ``pyramid.config.Configurator``\
    \ can now be used as a context manager\n  which will automatically push/pop threadlocals (similar to\n  ``config.begin()`` and ``config.end()``). It will also automatically perform\n  a ``config.commit()``\
    \ and thus it is only recommended to be used at the\n  top-level of your app. See https://github.com/Pylons/pyramid/pull/2874\n\n- The threadlocals are now available inside any function invoked via\n\
    \  ``config.include``. This means the only config-time code that cannot rely\n  on threadlocals is code executed from non-actions inside the main. This\n  can be alleviated by invoking ``config.begin()``\
    \ and ``config.end()``\n  appropriately or using the new context manager feature of the configurator.\n  See https://github.com/Pylons/pyramid/pull/2989\n\nBug Fixes\n---------\n\n- HTTPException's\
    \ accepts a detail kwarg that may be used to pass additional\n  details to the exception. You may now pass objects so long as they have a\n  valid __str__ method. See https://github.com/Pylons/pyramid/pull/2951\n\
    \n- Fix a reference cycle causing memory leaks in which the registry\n  would keep a ``Configurator`` instance alive even after the configurator\n  was discarded. Another fix was also added for the\
    \ ``global_registries``\n  object in which the registry was stored in a closure preventing it from\n  being deallocated. See https://github.com/Pylons/pyramid/pull/2967\n\n- Fix a bug directly invoking\
    \ ``pyramid.scripts.pserve.main`` with the\n  ``--reload`` option in which ``sys.argv`` is always used in the subprocess\n  instead of the supplied ``argv``.\n  See https://github.com/Pylons/pyramid/pull/2962\n\
    \nDeprecations\n------------\n\n- Pyramid currently depends on ``plaster_pastedeploy`` to simplify the\n  transition to ``plaster`` by maintaining integrated support for INI files.\n  This dependency\
    \ on ``plaster_pastedeploy`` should be considered subject to\n  Pyramid's deprecation policy and may be removed in the future.\n  Applications should depend on the appropriate plaster binding to satisfy\n\
    \  their needs.\n\n- Retrieving CSRF token from the session has been deprecated in favor of\n  equivalent methods in the ``pyramid.csrf`` module. The CSRF methods\n  (``ISession.get_csrf_token`` and\
    \ ``ISession.new_csrf_token``) are no longer\n  required on the ``ISession`` interface except when using the default\n  ``pyramid.csrf.LegacySessionCSRFStoragePolicy``.\n\n  Also, ``pyramid.session.check_csrf_token``\
    \ is now located at\n  ``pyramid.csrf.check_csrf_token``.\n\n  See https://github.com/Pylons/pyramid/pull/2854 and\n  https://github.com/Pylons/pyramid/pull/3019\n\nDocumentation Changes\n---------------------\n\
    \n- Added the execution policy to the routing diagram in the Request Processing\n  chapter. See https://github.com/Pylons/pyramid/pull/2993\n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
