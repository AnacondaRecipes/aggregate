diff --git a/tensorflow/workspace.bzl b/tensorflow/workspace.bzl
index 25aecb5..0f35e23 100644
--- a/tensorflow/workspace.bzl
+++ b/tensorflow/workspace.bzl
@@ -51,6 +51,12 @@ def _temp_workaround_http_archive_impl(repo_ctx):
    repo_ctx.download_and_extract(repo_ctx.attr.urls, "", repo_ctx.attr.sha256,
                                  "", repo_ctx.attr.strip_prefix)
 
+   if repo_ctx.attr.patch:
+      patch_file = str(repo_ctx.path(repo_ctx.attr.patch).realpath)
+      result = repo_ctx.execute(["bash", "-c", "patch -p1 < " + patch_file])
+      if result.return_code != 0:
+         fail("Failed to patch (%s): %s" % (result.return_code, result.stderr))
+
 temp_workaround_http_archive = repository_rule(
    implementation=_temp_workaround_http_archive_impl,
    attrs = {
@@ -59,6 +65,7 @@ temp_workaround_http_archive = repository_rule(
       "urls": attr.string_list(default = []),
       "sha256": attr.string(default = ""),
       "strip_prefix": attr.string(default = ""),
+      "patch": attr.label(mandatory=False, default = None), 
    })
 
 # If TensorFlow is linked as a submodule.
@@ -347,6 +354,7 @@ def tf_workspace(path_prefix = "", tf_repo_name = ""):
       strip_prefix = "llvm-53a96f264ef1148873c2c08bededc4c04a17078c",
       build_file = str(Label("//third_party/llvm:llvm.BUILD")),
       repository = tf_repo_name,
+      patch = str(Label("//third_party:llvm.patch")),
   )
 
   native.new_http_archive(
diff --git a/third_party/llvm.patch b/third_party/llvm.patch
new file mode 100644
index 0000000..7d73473
--- /dev/null
+++ b/third_party/llvm.patch
@@ -0,0 +1,25 @@
+diff --git a/include/llvm/ADT/StringRef.h b/include/llvm/ADT/StringRef.h
+index ce48f6d..b8cdf49 100644
+--- a/include/llvm/ADT/StringRef.h
++++ b/include/llvm/ADT/StringRef.h
+@@ -855,13 +855,13 @@ namespace llvm {
+   public:
+     template <size_t N>
+     constexpr StringLiteral(const char (&Str)[N])
+-#if defined(__clang__) && __has_attribute(enable_if)
+-#pragma clang diagnostic push
+-#pragma clang diagnostic ignored "-Wgcc-compat"
+-        __attribute((enable_if(__builtin_strlen(Str) == N - 1,
+-                               "invalid string literal")))
+-#pragma clang diagnostic pop
+-#endif
++//#if defined(__clang__) && __has_attribute(enable_if)
++//#pragma clang diagnostic push
++//#pragma clang diagnostic ignored "-Wgcc-compat"
++//        __attribute((enable_if(__builtin_strlen(Str) == N - 1,
++//                               "invalid string literal")))
++//#pragma clang diagnostic pop
++//#endif
+         : StringRef(Str, N - 1) {
+     }
+   };
